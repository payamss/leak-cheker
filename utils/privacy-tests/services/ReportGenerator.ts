import {
  DetailedPrivacyTestResult,
  TechnicalReport,
  UserFriendlyReport,
  TechnicalRecommendation,
  ScoreBreakdown
} from '../types';

export class ReportGenerator {
  private static instance: ReportGenerator;

  public static getInstance(): ReportGenerator {
    if (!ReportGenerator.instance) {
      ReportGenerator.instance = new ReportGenerator();
    }
    return ReportGenerator.instance;
  }

  public generateTechnicalReport(result: DetailedPrivacyTestResult): TechnicalReport {
    return {
      summary: this.generateSummary(result),
      detailedResults: result,
      exportFormats: {
        json: this.generateJSON(result),
        markdown: this.generateMarkdown(result),
        html: this.generateHTML(result),
        csv: this.generateCSV(result)
      }
    };
  }

  public generateUserFriendlyReport(result: DetailedPrivacyTestResult): UserFriendlyReport {
    return {
      displayData: result.userFriendly,
      visualElements: {
        scoreColor: this.getScoreColor(result.userFriendly.privacyScore),
        riskBadges: this.generateRiskBadges(result),
        recommendations: this.categorizeRecommendations(result.detailed.technicalRecommendations)
      }
    };
  }

  private generateSummary(result: DetailedPrivacyTestResult) {
    const issues = this.identifyMajorIssues(result);
    const testCounts = this.calculateTestCounts(result);

    return {
      overallScore: result.userFriendly.privacyScore,
      riskLevel: this.calculateRiskLevel(result.userFriendly.privacyScore),
      majorIssues: issues,
      testsPassed: testCounts.passed,
      testsFailed: testCounts.failed,
      totalTests: testCounts.total
    };
  }

  private generateMarkdown(result: DetailedPrivacyTestResult): string {
    return `# üîí Privacy Test Report

**Generated:** ${new Date(result.metadata.timestamp).toLocaleString()}  
**Browser:** ${result.detailed.browser.name} ${result.detailed.browser.version}  
**Overall Score:** ${result.userFriendly.privacyScore}% (${this.calculateRiskLevel(result.userFriendly.privacyScore)} risk)  
**Test Duration:** ${result.metadata.testDuration}ms  

## üìä Executive Summary

${this.generateExecutiveSummary(result)}

## üîç Detailed Test Results

### üç™ Cookie & Storage Analysis
- **Third-party cookies:** ${result.userFriendly.cookies.thirdPartyCookiesBlocked ? '‚úÖ BLOCKED' : '‚ùå ENABLED'}
- **Local Storage:** ${result.userFriendly.cookies.localStorageBlocked ? '‚úÖ BLOCKED' : '‚ö†Ô∏è AVAILABLE'}
- **Session Storage:** ${result.userFriendly.cookies.sessionStorageBlocked ? '‚úÖ BLOCKED' : '‚ö†Ô∏è AVAILABLE'}

### üé≠ Browser Fingerprinting Analysis
- **Canvas Fingerprinting:** ${result.userFriendly.fingerprinting.canvasBlocked ? '‚úÖ BLOCKED' : '‚ùå POSSIBLE'}
- **WebGL Fingerprinting:** ${result.userFriendly.fingerprinting.webglBlocked ? '‚úÖ BLOCKED' : '‚ùå POSSIBLE'}
- **Font Enumeration:** ${result.userFriendly.fingerprinting.fontsDetected.length} fonts detected
- **Plugin Enumeration:** ${result.userFriendly.fingerprinting.pluginsDetected.length} plugins detected

### üñ•Ô∏è Hardware Fingerprinting Analysis
- **CPU Cores:** ${result.userFriendly.hardware.cpuCores} ${result.detailed.hardware.spoofingDetected.cpuCores ? '(Spoofed ‚úÖ)' : '(Exposed ‚ùå)'}
- **Device Memory:** ${result.userFriendly.hardware.deviceMemory}GB ${result.detailed.hardware.spoofingDetected.deviceMemory ? '(Spoofed ‚úÖ)' : '(Exposed ‚ùå)'}
- **Screen Resolution:** ${result.userFriendly.hardware.screen.width}x${result.userFriendly.hardware.screen.height} ${result.detailed.hardware.spoofingDetected.screenResolution ? '(Spoofed ‚úÖ)' : '(Exposed ‚ùå)'}

---
*Report generated by Privacy Test Suite v${result.metadata.testVersion} on ${new Date(result.metadata.timestamp).toLocaleString()}*
*Test completed in ${result.metadata.testDuration}ms*`;
  }

  private generateJSON(result: DetailedPrivacyTestResult): string {
    return JSON.stringify(result, null, 2);
  }

  private generateHTML(result: DetailedPrivacyTestResult): string {
    const scoreColor = this.getScoreColor(result.userFriendly.privacyScore);
    const riskLevel = this.calculateRiskLevel(result.userFriendly.privacyScore);

    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Privacy Test Report - ${result.userFriendly.privacyScore}%</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; background: #f8f9fa; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 40px; border-radius: 15px; margin-bottom: 30px; text-align: center; }
        .score { font-size: 4em; font-weight: bold; color: ${scoreColor}; }
        .section { background: white; margin: 20px 0; padding: 30px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîí Privacy Test Report</h1>
            <div class="score">${result.userFriendly.privacyScore}%</div>
            <p>Risk Level: ${riskLevel.toUpperCase()}</p>
        </div>
        <div class="section">
            <h2>Test Results</h2>
            <p>Third-party Cookies: ${result.userFriendly.cookies.thirdPartyCookiesBlocked ? 'BLOCKED' : 'ENABLED'}</p>
            <p>Canvas Fingerprinting: ${result.userFriendly.fingerprinting.canvasBlocked ? 'BLOCKED' : 'POSSIBLE'}</p>
            <p>WebGL Fingerprinting: ${result.userFriendly.fingerprinting.webglBlocked ? 'BLOCKED' : 'POSSIBLE'}</p>
        </div>
    </div>
</body>
</html>`;
  }

  private generateCSV(result: DetailedPrivacyTestResult): string {
    const rows = [
      ['Metric', 'Value', 'Status'],
      ['Overall Privacy Score', `${result.userFriendly.privacyScore}%`, this.calculateRiskLevel(result.userFriendly.privacyScore)],
      ['Browser', result.detailed.browser.name, ''],
      ['Third-party Cookies', result.userFriendly.cookies.thirdPartyCookiesBlocked ? 'BLOCKED' : 'ENABLED', result.userFriendly.cookies.thirdPartyCookiesBlocked ? 'GOOD' : 'RISK'],
      ['Canvas Fingerprinting', result.userFriendly.fingerprinting.canvasBlocked ? 'BLOCKED' : 'POSSIBLE', result.userFriendly.fingerprinting.canvasBlocked ? 'GOOD' : 'RISK'],
      ['WebGL Fingerprinting', result.userFriendly.fingerprinting.webglBlocked ? 'BLOCKED' : 'POSSIBLE', result.userFriendly.fingerprinting.webglBlocked ? 'GOOD' : 'RISK']
    ];

    return rows.map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');
  }

  // Helper methods
  private generateExecutiveSummary(result: DetailedPrivacyTestResult): string {
    const score = result.userFriendly.privacyScore;
    const riskLevel = this.calculateRiskLevel(score);

    if (score >= 80) {
      return `üéâ **Excellent privacy protection!** Your browser is well-configured with ${riskLevel} privacy risk.`;
    } else if (score >= 60) {
      return `‚úÖ **Good privacy protection.** Your browser has ${riskLevel} privacy risk with room for improvement.`;
    } else if (score >= 40) {
      return `‚ö†Ô∏è **Moderate privacy protection.** Your browser has ${riskLevel} privacy risk.`;
    } else {
      return `üö® **Poor privacy protection!** Your browser has ${riskLevel} privacy risk.`;
    }
  }

  private calculateRiskLevel(score: number): 'low' | 'medium' | 'high' | 'critical' {
    if (score >= 80) return 'low';
    if (score >= 60) return 'medium';
    if (score >= 40) return 'high';
    return 'critical';
  }

  private identifyMajorIssues(result: DetailedPrivacyTestResult): string[] {
    const issues: string[] = [];

    if (!result.userFriendly.cookies.thirdPartyCookiesBlocked) {
      issues.push('Third-party cookies enabled');
    }
    if (!result.userFriendly.fingerprinting.canvasBlocked) {
      issues.push('Canvas fingerprinting possible');
    }
    if (!result.userFriendly.fingerprinting.webglBlocked) {
      issues.push('WebGL fingerprinting possible');
    }

    return issues;
  }

  private calculateTestCounts(result: DetailedPrivacyTestResult) {
    const tests = [
      result.userFriendly.cookies.thirdPartyCookiesBlocked,
      result.userFriendly.fingerprinting.canvasBlocked,
      result.userFriendly.fingerprinting.webglBlocked
    ];

    const passed = tests.filter(Boolean).length;
    const total = tests.length;

    return {
      passed,
      failed: total - passed,
      total
    };
  }

  private getScoreColor(score: number): string {
    if (score >= 80) return '#28a745';
    if (score >= 60) return '#ffc107';
    if (score >= 40) return '#fd7e14';
    return '#dc3545';
  }

  private generateRiskBadges(result: DetailedPrivacyTestResult) {
    return [
      {
        test: 'Third-party Cookies',
        status: result.userFriendly.cookies.thirdPartyCookiesBlocked ? 'good' as const : 'risk' as const,
        color: result.userFriendly.cookies.thirdPartyCookiesBlocked ? '#28a745' : '#dc3545',
        icon: result.userFriendly.cookies.thirdPartyCookiesBlocked ? '‚úÖ' : '‚ùå'
      }
    ];
  }

  private categorizeRecommendations(recommendations: TechnicalRecommendation[]) {
    return [
      {
        category: 'High Priority',
        items: recommendations.filter(r => r.category === 'critical').map(r => r.title),
        priority: 'high' as const
      }
    ];
  }
} 